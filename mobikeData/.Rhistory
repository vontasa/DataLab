beforeLegs<-length(E(g1,path=p1$vpath[[1]]))+length(E(g2,path=p2$vpath[[1]]))
# + shipping cost
beforeCost<-beforeCost+sum(E(g1,path=p1$vpath[[1]])$cost)+sum(E(g2,path=p2$vpath[[1]])$cost)+V(g2)[container$`Port of Transhipment`]$transship
}
}
}
# Optimize vessel schedule
vessels<-max(ceiling(E(graph)$currentWeight/E(graph)$wlimit), ceiling(E(graph)$currentVolume/E(graph)$vlimit))
network.raw$currentVolume<-E(graph)$currentVolume
network.raw$currentWeight<-E(graph)$currentWeight
network.raw$vessels<-pmax(ceiling(network.raw$currentVolume/network.raw$vlimit),ceiling(network.raw$currentVolume/network.raw$vlimit))
network.raw$volumeUtil<-network.raw$currentVolume/(network.raw$vessels*network.raw$vlimit)
network.raw$weightUtil<-network.raw$currentWeight/(network.raw$vessels*network.raw$wlimit)
# Total weight by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentWeight/50,
edge.label = E(graph)$currentWeight,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
# Total volume by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentVolume/5,
edge.label = E(graph)$currentVolume,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
(sum(output$beforeCost)-sum(output$cost))/sum(output$beforeCost)
#write.csv(output, '~/workspace/BCG challenge/routes.xlsx')
#write.csv(network.raw, '~/workspace/BCG challenge/network.xlsx')
library(igraph)
library(readxl)
# Edge attributes
network.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset1.xlsx', sheet='network')
# Vertices attributes
port.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset1.xlsx', sheet='Ports')
# Routes
routes.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset1.xlsx', sheet='Routes')
graph<-graph_from_data_frame(d=network.raw, vertices=port.raw, directed=T)
nodes<-unique(network.raw$from)
N_NODES<-length(nodes)
adjMat<-matrix(0, N_NODES, N_NODES)
rownames(adjMat)<-nodes
colnames(adjMat)<-nodes
adjMat[as.matrix(network.raw[,c('from','to')])]<-network.raw$cost
graph<-delete.vertices(graph, degree(graph)==0)
colrs <- c("darkgoldenrod3", "tomato", "deepskyblue3")
E(graph)$color <- colrs[as.factor(E(graph)$line)]
#tkid <- tkplot(graph, seed) #tkid is the id of the tkplot that will open
#l <- tkplot.getcoords(tkid) # grab the coordinates from tkplot
#tk_close(tkid, window.close = T)
set.seed(13)
#l<-layout.drl(graph, use.seed=TRUE)
#l <- layout_with_kk(graph)
l <- layout_with_fr(graph)
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=1,
vertex.label.cex=0.75,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
pathCost<-function(g, p){
#p<-path.all[[1]]
#g<-graph
# Shipping cost
routeCost<-sum(E(g,path=p)$cost)
# Loding and discharge cost
loadCost<-(V(g)[head(p,n=1)$name]$load)
dischargeCost<-V(g)[tail(p,n=1)$name]$discharge
# Line of each edge in the path
line<-as.factor(E(g,path=p)$line)
# Index of line change port in the given path
trans.index<-1+which(diff(as.integer(line))!=0)
trans.v<-p[trans.index]$name
transshipCost<-sum(V(g)[name%in%trans.v]$transship)
result<-list("cost"=transshipCost+routeCost+loadCost+dischargeCost, "trans"=trans.v)
#ldPort<-c(head(p,n=1)$name,tail(p,n=1)$name)
#ldCtry<-subset(port.raw, code%in%ldPort)$ctry
#length(intersect(ldCtry,cabotage))>0 && (trans.v %in% cabotage)
return(result)
}
cabotage<-c("BR")
# Minimize shipping cost: Given from/to, output the route with min route by each container.
output<-data.frame(id=numeric(), from=character(), to=character(), path=character(), cost=numeric(), line1=character(), line2=character(), line3=character(), trans1=character(), trans2=character(), legs=character(),beforeCost=numeric(), beforeLegs=numeric(),stringsAsFactors=FALSE)
E(graph)$currentVolume<-0
E(graph)$currentWeight<-0
for(i in 1:nrow(routes.raw)){ #1:nrow(routes.raw)
container<-routes.raw[i,]
path.all<-all_simple_paths(graph,
from = V(graph)[name==container$`Port of Load`],
to  = V(graph)[name==container$`Port of Discharge`])
# Given a path, calculate the cost
result<-sapply(path.all, FUN=pathCost, g=graph)
pathCost.all<-unlist(result[1,])
# get the index of the lowest cost
index.best<-which.min(pathCost.all)
path.best<-path.all[[index.best]]
edge.best<-E(graph,path=path.best)
E(graph,path=path.best)$currentVolume<-E(graph,path=path.best)$currentVolume+container$Volume
E(graph,path=path.best)$currentWeight<-E(graph,path=path.best)$currentWeight+container$Weight
trans.best<-unlist(result[2,index.best])
path.best.str<-paste(path.best$name, collapse = ", ")
lines<-unique(E(graph,path=path.best)$line)
record<-list(id=routes.raw[i,]$`Container ID`, from=path.best[1]$name, to=path.best[length(path.best)]$name, path=path.best.str, cost=min(pathCost.all),
line1=lines[1], line2=lines[2], line3=lines[3], trans1=trans.best[1], trans2=trans.best[2], legs=length(E(graph,path=path.best)),beforeCost=0, beforeLegs=0)
record<-as.data.frame(record, stringsAsFactors = F)
output<-rbind.data.frame(output, record)
}
output$volume<-routes.raw$Volume
output$weight<-routes.raw$Weight
# List of subgraph of each line
lineSubgraph<-lapply(unique(network.raw$line), function(x){
return(subgraph.edges(graph, E(graph)[line==x]))
})
names(lineSubgraph)<-unique(network.raw$line)
# Evaluate the historical data
before<-apply(routes.raw, 1, function(x){
legs<--1
cost<--1
t_flag<-T
d_flag<-T
if(is.na(x['First Service'])){
l_flag<-F
return(c(err=(!l_flag)*100+(!t_flag)*10+(!d_flag)*1, cost=cost, legs=legs))
}
l_flag<-x['Port of Load']%in%V(lineSubgraph[[x['First Service']]])$name
if(is.na(x['Port of Transhipment'])){
g<-lineSubgraph[[x['First Service']]]
d_flag<-x['Port of Discharge']%in%V(g)$name
if(d_flag){
p<-shortest_paths(g, output = "both",
from = V(g)[name==x['Port of Load']],
to  = V(g)[name==x['Port of Discharge']])
cost<-sum(E(g,path=p$vpath[[1]])$cost)+V(g)[x['Port of Load']]$load+V(g)[x['Port of Discharge']]$discharge
legs<-length(E(g,path=p$vpath[[1]]))
}
}else{
g1<-lineSubgraph[[x['First Service']]]
g2<-lineSubgraph[[x['Second Service']]]
d_flag<-x['Port of Discharge']%in%V(g2)$name
t_flag<-x['Port of Transhipment']%in%V(g2)$name && x['Port of Transhipment']%in%V(g1)$name
if(d_flag&&t_flag){
p1<-shortest_paths(g1, output = "both",
from = V(g1)[name==x['Port of Load']],
to  = V(g1)[name==x['Port of Transhipment']])
cost1<-sum(E(g1,path=p1$vpath[[1]])$cost)
legs1<-length(E(g1,path=p1$vpath[[1]]))
p2<-shortest_paths(g2, output = "both",
from = V(g2)[name==x['Port of Transhipment']],
to  = V(g2)[name==x['Port of Discharge']])
cost2<-sum(E(g2,path=p2$vpath[[1]])$cost)
legs2<-length(E(g2,path=p2$vpath[[1]]))
cost<-cost1+cost2+V(g1)[x['Port of Load']]$load+V(g2)[x['Port of Discharge']]$discharge+V(g2)[x['Port of Transhipment']]$transship
legs<-legs1+legs2
}
}
return(c(err=(!l_flag)*100+(!t_flag)*10+(!d_flag)*1, cost=cost, legs=legs))
})
# Transpose
output$beforeErr<-before['err',]
output$beforeCost<-before['cost',]
output$beforeLegs<-before['legs',]
if(FALSE){
# Evaluate the old
# Load and discharge cost
beforeCost<-V(graph)[container$`Port of Load`]$load+V(graph)[container$`Port of Discharge`]$discharge
g1<-subgraph.edges(graph, E(graph)[line==container$`First Service`])
if(is.na(container$`Second Service`)){ # if direct shipping
p1<-shortest_paths(g1,
from = V(g1)[name==container$`Port of Load`],
to  = V(g1)[name==container$`Port of Discharge`], output = "both")
if(length(V(g1)[name==container$`Port of Discharge`])==0||length(V(g1)[name==container$`Port of Load`])==0){
beforeLegs<--1 # error
beforeCost<--1 # error
}else{
beforeLegs<-length(E(g1,path=p1$vpath[[1]]))
# + shipping cost
beforeCost<-beforeCost+sum(E(g1,path=p1$vpath[[1]])$cost)
}
}else{ # if transship
g2<-subgraph.edges(graph, E(graph)[line==container$`Second Service`])
p1<-shortest_paths(g1,
from = V(g1)[name==container$`Port of Load`],
to  = V(g1)[name==container$`Port of Transhipment`], output = "both")
p2<-shortest_paths(g2,
from = V(g2)[name==container$`Port of Transhipment`],
to  = V(g2)[name==container$`Port of Discharge`], output = "both")
if(length(V(g2)[name==container$`Port of Transhipment`])==0||length(V(g2)[name==container$`Port of Discharge`])==0||length(V(g1)[name==container$`Port of Load`])==0||length(V(g1)[name==container$`Port of Transhipment`]))
{
beforeLegs<--1 # error
beforeCost<--1 # error
}else{
beforeLegs<-length(E(g1,path=p1$vpath[[1]]))+length(E(g2,path=p2$vpath[[1]]))
# + shipping cost
beforeCost<-beforeCost+sum(E(g1,path=p1$vpath[[1]])$cost)+sum(E(g2,path=p2$vpath[[1]])$cost)+V(g2)[container$`Port of Transhipment`]$transship
}
}
}
# Optimize vessel schedule
vessels<-max(ceiling(E(graph)$currentWeight/E(graph)$wlimit), ceiling(E(graph)$currentVolume/E(graph)$vlimit))
network.raw$currentVolume<-E(graph)$currentVolume
network.raw$currentWeight<-E(graph)$currentWeight
network.raw$vessels<-pmax(ceiling(network.raw$currentVolume/network.raw$vlimit),ceiling(network.raw$currentVolume/network.raw$vlimit))
network.raw$volumeUtil<-network.raw$currentVolume/(network.raw$vessels*network.raw$vlimit)
network.raw$weightUtil<-network.raw$currentWeight/(network.raw$vessels*network.raw$wlimit)
# Total weight by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentWeight/50,
edge.label = E(graph)$currentWeight,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
# Total volume by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentVolume/5,
edge.label = E(graph)$currentVolume,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
(sum(output$beforeCost)-sum(output$cost))/sum(output$beforeCost)
write.csv(output, '~/workspace/BCG challenge/routes.xlsx')
write.csv(network.raw, '~/workspace/BCG challenge/network.xlsx')
library(igraph)
library(readxl)
# Edge attributes
network.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset2.xlsx', sheet='network')
# Vertices attributes
port.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset2.xlsx', sheet='Ports')
# Routes
routes.raw<-read_xlsx('~/workspace/BCG challenge/Ops Case - ShippingCo_dataset2.xlsx', sheet='Routes')
graph<-graph_from_data_frame(d=network.raw, vertices=port.raw, directed=T)
nodes<-unique(network.raw$from)
N_NODES<-length(nodes)
adjMat<-matrix(0, N_NODES, N_NODES)
rownames(adjMat)<-nodes
colnames(adjMat)<-nodes
adjMat[as.matrix(network.raw[,c('from','to')])]<-network.raw$cost
graph<-delete.vertices(graph, degree(graph)==0)
colrs <- c("darkgoldenrod3", "tomato", "deepskyblue3")
E(graph)$color <- colrs[as.factor(E(graph)$line)]
#tkid <- tkplot(graph, seed) #tkid is the id of the tkplot that will open
#l <- tkplot.getcoords(tkid) # grab the coordinates from tkplot
#tk_close(tkid, window.close = T)
set.seed(13)
#l<-layout.drl(graph, use.seed=TRUE)
#l <- layout_with_kk(graph)
l <- layout_with_fr(graph)
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=1,
vertex.label.cex=0.75,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
pathCost<-function(g, p){
#p<-path.all[[1]]
#g<-graph
# Shipping cost
routeCost<-sum(E(g,path=p)$cost)
# Loding and discharge cost
loadCost<-(V(g)[head(p,n=1)$name]$load)
dischargeCost<-V(g)[tail(p,n=1)$name]$discharge
# Line of each edge in the path
line<-as.factor(E(g,path=p)$line)
# Index of line change port in the given path
trans.index<-1+which(diff(as.integer(line))!=0)
trans.v<-p[trans.index]$name
transshipCost<-sum(V(g)[name%in%trans.v]$transship)
result<-list("cost"=transshipCost+routeCost+loadCost+dischargeCost, "trans"=trans.v)
#ldPort<-c(head(p,n=1)$name,tail(p,n=1)$name)
#ldCtry<-subset(port.raw, code%in%ldPort)$ctry
#length(intersect(ldCtry,cabotage))>0 && (trans.v %in% cabotage)
return(result)
}
cabotage<-c("BR")
# Minimize shipping cost: Given from/to, output the route with min route by each container.
output<-data.frame(id=numeric(), from=character(), to=character(), path=character(), cost=numeric(), line1=character(), line2=character(), line3=character(), trans1=character(), trans2=character(), legs=character(),beforeCost=numeric(), beforeLegs=numeric(),stringsAsFactors=FALSE)
E(graph)$currentVolume<-0
E(graph)$currentWeight<-0
for(i in 1:nrow(routes.raw)){ #1:nrow(routes.raw)
container<-routes.raw[i,]
path.all<-all_simple_paths(graph,
from = V(graph)[name==container$`Port of Load`],
to  = V(graph)[name==container$`Port of Discharge`])
# Given a path, calculate the cost
result<-sapply(path.all, FUN=pathCost, g=graph)
pathCost.all<-unlist(result[1,])
# get the index of the lowest cost
index.best<-which.min(pathCost.all)
path.best<-path.all[[index.best]]
edge.best<-E(graph,path=path.best)
E(graph,path=path.best)$currentVolume<-E(graph,path=path.best)$currentVolume+container$Volume
E(graph,path=path.best)$currentWeight<-E(graph,path=path.best)$currentWeight+container$Weight
trans.best<-unlist(result[2,index.best])
path.best.str<-paste(path.best$name, collapse = ", ")
lines<-unique(E(graph,path=path.best)$line)
record<-list(id=routes.raw[i,]$`Container ID`, from=path.best[1]$name, to=path.best[length(path.best)]$name, path=path.best.str, cost=min(pathCost.all),
line1=lines[1], line2=lines[2], line3=lines[3], trans1=trans.best[1], trans2=trans.best[2], legs=length(E(graph,path=path.best)),beforeCost=0, beforeLegs=0)
record<-as.data.frame(record, stringsAsFactors = F)
output<-rbind.data.frame(output, record)
}
output$volume<-routes.raw$Volume
output$weight<-routes.raw$Weight
# List of subgraph of each line
lineSubgraph<-lapply(unique(network.raw$line), function(x){
return(subgraph.edges(graph, E(graph)[line==x]))
})
names(lineSubgraph)<-unique(network.raw$line)
# Evaluate the historical data
before<-apply(routes.raw, 1, function(x){
legs<--1
cost<--1
t_flag<-T
d_flag<-T
if(is.na(x['First Service'])){
l_flag<-F
return(c(err=(!l_flag)*100+(!t_flag)*10+(!d_flag)*1, cost=cost, legs=legs))
}
l_flag<-x['Port of Load']%in%V(lineSubgraph[[x['First Service']]])$name
if(is.na(x['Port of Transhipment'])){
g<-lineSubgraph[[x['First Service']]]
d_flag<-x['Port of Discharge']%in%V(g)$name
if(d_flag){
p<-shortest_paths(g, output = "both",
from = V(g)[name==x['Port of Load']],
to  = V(g)[name==x['Port of Discharge']])
cost<-sum(E(g,path=p$vpath[[1]])$cost)+V(g)[x['Port of Load']]$load+V(g)[x['Port of Discharge']]$discharge
legs<-length(E(g,path=p$vpath[[1]]))
}
}else{
g1<-lineSubgraph[[x['First Service']]]
g2<-lineSubgraph[[x['Second Service']]]
d_flag<-x['Port of Discharge']%in%V(g2)$name
t_flag<-x['Port of Transhipment']%in%V(g2)$name && x['Port of Transhipment']%in%V(g1)$name
if(d_flag&&t_flag){
p1<-shortest_paths(g1, output = "both",
from = V(g1)[name==x['Port of Load']],
to  = V(g1)[name==x['Port of Transhipment']])
cost1<-sum(E(g1,path=p1$vpath[[1]])$cost)
legs1<-length(E(g1,path=p1$vpath[[1]]))
p2<-shortest_paths(g2, output = "both",
from = V(g2)[name==x['Port of Transhipment']],
to  = V(g2)[name==x['Port of Discharge']])
cost2<-sum(E(g2,path=p2$vpath[[1]])$cost)
legs2<-length(E(g2,path=p2$vpath[[1]]))
cost<-cost1+cost2+V(g1)[x['Port of Load']]$load+V(g2)[x['Port of Discharge']]$discharge+V(g2)[x['Port of Transhipment']]$transship
legs<-legs1+legs2
}
}
return(c(err=(!l_flag)*100+(!t_flag)*10+(!d_flag)*1, cost=cost, legs=legs))
})
# Transpose
output$beforeErr<-before['err',]
output$beforeCost<-before['cost',]
output$beforeLegs<-before['legs',]
if(FALSE){
# Evaluate the old
# Load and discharge cost
beforeCost<-V(graph)[container$`Port of Load`]$load+V(graph)[container$`Port of Discharge`]$discharge
g1<-subgraph.edges(graph, E(graph)[line==container$`First Service`])
if(is.na(container$`Second Service`)){ # if direct shipping
p1<-shortest_paths(g1,
from = V(g1)[name==container$`Port of Load`],
to  = V(g1)[name==container$`Port of Discharge`], output = "both")
if(length(V(g1)[name==container$`Port of Discharge`])==0||length(V(g1)[name==container$`Port of Load`])==0){
beforeLegs<--1 # error
beforeCost<--1 # error
}else{
beforeLegs<-length(E(g1,path=p1$vpath[[1]]))
# + shipping cost
beforeCost<-beforeCost+sum(E(g1,path=p1$vpath[[1]])$cost)
}
}else{ # if transship
g2<-subgraph.edges(graph, E(graph)[line==container$`Second Service`])
p1<-shortest_paths(g1,
from = V(g1)[name==container$`Port of Load`],
to  = V(g1)[name==container$`Port of Transhipment`], output = "both")
p2<-shortest_paths(g2,
from = V(g2)[name==container$`Port of Transhipment`],
to  = V(g2)[name==container$`Port of Discharge`], output = "both")
if(length(V(g2)[name==container$`Port of Transhipment`])==0||length(V(g2)[name==container$`Port of Discharge`])==0||length(V(g1)[name==container$`Port of Load`])==0||length(V(g1)[name==container$`Port of Transhipment`]))
{
beforeLegs<--1 # error
beforeCost<--1 # error
}else{
beforeLegs<-length(E(g1,path=p1$vpath[[1]]))+length(E(g2,path=p2$vpath[[1]]))
# + shipping cost
beforeCost<-beforeCost+sum(E(g1,path=p1$vpath[[1]])$cost)+sum(E(g2,path=p2$vpath[[1]])$cost)+V(g2)[container$`Port of Transhipment`]$transship
}
}
}
# Optimize vessel schedule
vessels<-max(ceiling(E(graph)$currentWeight/E(graph)$wlimit), ceiling(E(graph)$currentVolume/E(graph)$vlimit))
network.raw$currentVolume<-E(graph)$currentVolume
network.raw$currentWeight<-E(graph)$currentWeight
network.raw$vessels<-pmax(ceiling(network.raw$currentVolume/network.raw$vlimit),ceiling(network.raw$currentVolume/network.raw$vlimit))
network.raw$volumeUtil<-network.raw$currentVolume/(network.raw$vessels*network.raw$vlimit)
network.raw$weightUtil<-network.raw$currentWeight/(network.raw$vessels*network.raw$wlimit)
# Total weight by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentWeight/50,
edge.label = E(graph)$currentWeight,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
# Total volume by edge
plot(graph, layout=l,
edge.arrow.size=1,
edge.width=E(graph)$currentVolume/5,
edge.label = E(graph)$currentVolume,
edge.label.family="Helvetica",
edge.label.font=2,
edge.label.cex= 1,
vertex.label.cex=1.2,
vertex.label.family="Helvetica",
vertex.label.font=2,
vertex.shape="circle",
vertex.size=0,
vertex.label.color="black")
legend(x=1, y=1, unique(E(graph)$line), pch=21, pt.bg=levels(as.factor(E(graph)$color)), pt.cex=2, cex=.8, bty="n", ncol=1)
(sum(output$beforeCost)-sum(output$cost))/sum(output$beforeCost)
write.csv(output, '~/workspace/BCG challenge/routes2.xlsx')
write.csv(network.raw, '~/workspace/BCG challenge/network2.xlsx')
require(igraph)
require(readxl)
library(RSQLite)
library(DBI)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(devtools)
library(gganimate)
con <- dbConnect(RSQLite::SQLite(), "~/workspace/github/mobike-crawler/temp.db")
dbListTables(con)
raw<-dbReadTable(con, "mobike", row.names = FALSE)
dbDisconnect(con)
df<- raw %>%
select(runID, Time, distId, bikeType, lon, lat) %>%
group_by(runID, distId) %>%
summarize(bikeType = mean(bikeType), lon = mean(lon), lat= mean(lat))
head(df)
df$runID<-as.factor(df$runID)
map <- get_map(location =  c(lon = mean(df$lon), lat =	mean(df$lat)), maptype = "roadmap", zoom = 15)
#ggmap(map, extent = "device") +
#  geom_point(aes(x=lon, y=lat), colour="red", alpha=0.05, size=0.2, data=df)
ggmap(map, extent = "device") +
geom_density2d(data=df, aes(x = lon, y = lat), size = 0.2)+
stat_density2d(data = df,
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
p<-ggmap(map, extent = "device") +
geom_density2d(data=df, aes(x = lon, y = lat, frame=runID), size = 0.2)+
stat_density2d(data = df,
aes(x = lon, y = lat, fill = ..level.., alpha = ..level.., frame=runID), size = 0.01,
bins = 16, geom = "polygon") +
scale_fill_gradient(low = "white", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
setwd("~/workspace/github/datalab/mobikeData/")
gganimate(p)
write.gi
write.csv(df,"~/workspace/github/datalab/mobikeData/wuhan_snapshot_11_2_2017.csv",row.names = F)
p
