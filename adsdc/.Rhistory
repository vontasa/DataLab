B = as.vector(img[,,3])
)
library(ggplot2)
# ggplot theme to be used
plotTheme <- function() {
theme(
panel.background = element_rect(
size = 3,
colour = "black",
fill = "white"),
axis.ticks = element_line(
size = 2),
panel.grid.major = element_line(
colour = "gray80",
linetype = "dotted"),
panel.grid.minor = element_line(
colour = "gray90",
linetype = "dashed"),
axis.title.x = element_text(
size = rel(1.2),
face = "bold"),
axis.title.y = element_text(
size = rel(1.2),
face = "bold"),
plot.title = element_text(
size = 20,
face = "bold",
vjust = 1.5)
)
}
# Plot the image
ggplot(data = imgRGB, aes(x = x, y = y)) +
geom_point(colour = rgb(imgRGB[c("R", "G", "B")])) +
labs(title = "Original Image: Colorful Bird") +
xlab("x") +
ylab("y") +
plotTheme()
library(jpeg)
install.packages("jpeg")
library(jpeg)
install.packages("quantmod")
library(quantmod)
getSymbols("YHOO",src="google") # from google finance
View(YHOO)
barChart(YHOO)
candleChart(YHOO,multi.col=TRUE,theme="white")
addMACD()
addBBands()
setSymbolLookup(GOOG='google',YHOO='yahoo')
saveSymbolLookup(file='mySymbols.rda')
getSymbols(c('YHOO', 'GOOG'))
?setSymbolLookup
help rnorm
?nrom
rnorm(4)
rnorm(4, 22, 1)
rnorm(4, 20.83, 1)
.random.seed
.Random.seed
.Random.seed
str(.Random.seed)
str(.Random.seed)
str(.Random.seed)
str(.Random.seed)
str(.Random.seed)
?Nptest
NPtest
?NPtest
?NPTest
?NPtest
library(eRm)
?NPtest
install.packages("mcIRT")
library(mcIRT)
?NRM
?nrm
nrm(reshOBJ,etastart=-0.1, ctrl=list())
read.table("Simula9x.dat")
read.table("E:\\my work\\R code\\conghm\\Simula9x.dat")
raw<-read.table("E:\\my work\\R code\\conghm\\Simula9x.dat")
head(raw)
raw<-read.csv("E:\\my work\\R code\\conghm\\nrmdata.csv")
head(raw)
index(raw)
raw(1)
raw[1:]
raw[1,:]
raw[1,]
raw[,1]
str(2:11)
dtype(2:11)
typeof(2:11)
reshMG(raw)
rep(0,5)
reshMG(raw,item=2:11,group=1)
length(raw)
reshMG(raw,item=2:11,group=1,correct=rep(0,length(raw)))
nrow(raw)
reshMG(raw,item=2:11,group=1,correct=rep(0,nrow(raw)))
reshMG(raw,item=2:11,group=1,correct=rep(0,length(raw)))
reshMG(raw,item=2:11,group=1,correct=rep(0,10))
reshMG(raw,item=2:11,group=1,correct=rep(0,10),design="nodif")
reshMG(raw,item=2:11,group=1,correct=rep(0,10),paraM ="bock")
reshMG(raw,item=2:11,group=1,correct=rep(0,10),paraM ="bock")
reshMG(raw,item=2:11,group=1,correct=rep(0,10),paraM ="01")
reshMG(raw,item=2:11,group=1,correct=rep(2,11))
reshMG(raw,item=2:11,group=1,correct=rep(0,10))
reshMG(raw,item=2:11,group=1,correct=rep(0,10),design=mydes)
reshMG(raw,item=2:11,group=1,correct=rep(0,10))
raw<-read.csv("E:\\my work\\R code\\conghm\\nrmdata.csv")
head(raw)
reshMG(raw,item=2:11,group=1,correct=rep(0,10))
ParList <- lapply(1:3,function(x)
{
Item1 <- c(c(-2,-1,1,2),c(-1.2,0.3,0.2,0.7))
names(Item1) <- c(paste("zeta",1:4,sep=""),paste("lamb",1:4,sep=""))
Item1
})
names(ParList) <- paste("item",1:3,sep="")
# simulate person parameters
perp1     <- rnorm(1100,0,1)
# simulate data.frame
sim.nrm.1 <- NRM.sim(ParList,perp1)
# reshape
reshdat1 <- reshMG(sim.nrm.1,items=1:3,correct=rep(0,3))
# fit the nrm with a maximum number of 40 EM iterations, which is NOT recommanded
# and is just applied here because estimating the model during example checks on cran
# took too long with default settings
res.nrm <- nrm(reshdat1)
summary(res.nrm)
head(sim.nrm)
head(sim.nrm.1)
head(raw[,2:11])
head(raw[,3:11])
head(raw[,1:11])
head(raw[,2:11])
reshMG(raw[,2:11],item=1:10,correct=rep(0,10))
reshMG(raw,item=1:10,correct=rep(0,10))
reshMG(raw,item=1:10,group=0,correct=rep(0,10))
reshMG(raw,item=2:11,group=1,correct=rep(0,10))
reshMG(raw,item=1:11,group=1,correct=rep(0,10))
reshMG(raw,item=1:11,correct=rep(0,10))
1:11
reshMG(raw,item=1:10,correct=rep(0,10))
ncol(raw)
raw[1,0]
raw[1,1]
raw[1,11]
raw[1,12]
raw[1,11]
reshMG(raw,item=2:11,correct=rep(0,10))
rshdat<-reshMG(raw,item=2:11,correct=rep(0,10))
res.nrm <- nrm(reshdat)
res.nrm <- nrm(rshdat)
install.packages("geosphere")
install.packages("igraph")
install.packages("statnet")
require(geosphere)
require(igraph)
require(statnet)
require(geosphere)
require(igraph)
require(statnet)
deliveriesRaw<-read.csv("E:\\my work\\python code\\deliveries.csv",sep="\t")
storesRaw<-read.csv("E:\\my work\\python code\\stores.csv",sep="\t")
View(deliveriesRaw)
View(storesRaw)
deliveriesRaw<-read.csv("E:\\my work\\python code\\deliveries.csv",sep="\t")
storesRaw<-read.csv("E:\\my work\\python code\\stores.csv",sep="\t")
colnames(storesRaw)<-c("id","lat","lon")
require(geosphere)
require(igraph)
require(statnet)
deliveriesRaw<-read.csv("E:\\my work\\python code\\deliveries.csv",sep="\t")
storesRaw<-read.csv("E:\\my work\\python code\\stores.csv",sep="\t")
colnames(storesRaw)<-c("id","lat","lon")
colnames(deliveriesRaw)<-c("id","due","lat","lon","qty")
storesRaw$st<-5
deliveriesRaw$st<-qty
nodeList<-rbind(deliveriesRaw[,c("id","lon","lat","st")], storesRaw[,c("id","lon","lat", "st")])
deliveriesRaw<-read.csv("E:\\my work\\python code\\deliveries.csv",sep="\t")
storesRaw<-read.csv("E:\\my work\\python code\\stores.csv",sep="\t")
colnames(storesRaw)<-c("id","lat","lon")
colnames(deliveriesRaw)<-c("id","due","lat","lon","qty")
storesRaw$st<-5
deliveriesRaw$st<-deliveriesRaw$qty
nodeList<-rbind(deliveriesRaw[,c("id","lon","lat","st")], storesRaw[,c("id","lon","lat", "st")])
head(nodeList)
str(nodeList[1])
str(nodeList[1,])
rownames(nodeList)<-nodeList$id
str(nodeList['49',])
nodeDist<-distm(as.matrix(nodeList[,c("lon","lat")])) # Completed distance matrix
colnames(nodeDist)<-row.names(nodeList)
rownames(nodeDist)<-row.names(nodeList)
storeDist<-distm(as.matrix(storesRaw[,c("lon","lat")])) # store distance matrix
storeDist<-distm(as.matrix(storesRaw[,c("lon","lat")])) # store distance matrix
customerDist<-distm(as.matrix(deliveriesRaw[,c("lon","lat")])) # customer distance matrix
nodeDist<-distm(as.matrix(nodeList[,c("lon","lat")]))
View(nodeDist)
library(geosphere)
library(igraph)
library(statnet)
# Prep stores data
storesRaw<-read.csv("E:\\my work\\python code\\stores.csv",sep="\t")
colnames(storesRaw)<-c("id","lat","lon")
storesRaw$id<-as.character(storesRaw$id)
storesRaw$st<-5 # serivce time at store is 5 min
speed<-5 # 5 miles per min
startTime<-as.POSIXct("2014-03-13 15:00:00")
# Prep deliveries data
deliveriesRaw<-read.csv("E:\\my work\\python code\\deliveries.csv",sep="\t")
colnames(deliveriesRaw)<-c("id","due","lat","lon","qty")
deliveriesRaw$id<-as.character(deliveriesRaw$id)
deliveriesRaw$st<-deliveriesRaw$qty
deliveriesRaw$due<-as.POSIXct(deliveriesRaw$due)
nodeList<-rbind(deliveriesRaw[,c("id","lon","lat","st")], storesRaw[,c("id","lon","lat", "st")])
customers<-deliveriesRaw[,c("id","st","due")]
rownames(nodeList)<-nodeList$id
trip = list()
# Generate store distance matrix from lon/lat
nodeDist<-distm(as.matrix(nodeList[,c("lon","lat")])) # Completed distance matrix
colnames(nodeDist)<-row.names(nodeList)
rownames(nodeDist)<-row.names(nodeList)
storeDist<-distm(as.matrix(storesRaw[,c("lon","lat")])) # store distance matrix
customerDist<-distm(as.matrix(deliveriesRaw[,c("lon","lat")])) # customer distance matrix
# Step 1: Assign customers to its nearest store
customerToStoreDist<-distm(as.matrix(deliveriesRaw[,c("lon","lat")]) ,as.matrix(storesRaw[,c("lon","lat")]))
row.names(customerToStoreDist)<-deliveriesRaw$id
colnames(customerToStoreDist)<-storesRaw$id
# Look for the nearest store name for each customer
customerToStorePair <- t(sapply(seq(nrow(customerToStoreDist)),function(i) {
j <- which.min(customerToStoreDist[i,])
c(colnames(customerToStoreDist)[j], customerToStoreDist[i,j])
}))
View(customerToStorePair)
colnames(customerToStorePair)<-c("store", "distance")
row.names(customerToStorePair)<-deliveriesRaw$id
customerToStorePair<-as.data.frame(customerToStorePair)
customerToStorePair$store<-as.character(customerToStorePair$store)
customerToStorePair$customer<-rownames(customerToStorePair)
customerToStoreDist$id<-rownames(customerToStorePair)
View(customerToStorePair)
rownames(customers)<-customers$id
str(customerToStorePair)
customers$frm<-customerToStorePair$store
customers$at<-startTime+nodeDist[customers$id,customerToStorePair$store]/speed*60
obj<-sum(abs(customers$at-customers$due))
G<-graph.data.frame(customers[,c("frm","id")])
plot(G)
G
E(G)
E(G)[1]
str(E(G)[1])
V(G)
View(customers)
View(nodeList)
V(G)$st<-nodeList[V(G),]$st
V(G)$lon<-nodeList[V(G),]$lon
V(G)$lat<-nodeList[V(G),]$lat
V(G)
V(G)$st
V(G)[1]
V(G)[1]$st
V(G)[1]
str(V(G)[1])
V(G)[1]
V(G)[1]+1
V(G)[1]+2
V(G)[1]$name
V(G)$st<-nodeList[V(G)$name,]$st
V(G)$lon<-nodeList[V(G)$name,]$lon
V(G)$lat<-nodeList[V(G)$name,]$lat
V(G)[1]$st
View(storeDist)
View(storesRaw)
plot(G)
storesRaw$ini<-"49"
rbind(customers[,c("frm","id")], storesRaw[,c("ini","id")])
storesRaw[,c("ini","id")]
rbind(customers[,c("frm","id")], storesRaw[,c("ini","id")])
storesRaw$frm<-"49"
rbind(customers[,c("frm","id")], storesRaw[,c("frm","id")])
G<-graph.data.frame(rbind(customers[,c("frm","id")], storesRaw[,c("frm","id")]))
plot(G)
---
title: "Vignette Title"
author: "Vignette Author"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\usepackage[utf8]{inputenc}
---
Vignettes are long form documentation commonly included in packages. Because they are part of the distribution of the package, they need to be as compact as possible. The `html_vignette` output type provides a custom style sheet (and tweaks some options) to ensure that the resulting html is as small as possible. The `html_vignette` format:
- Never uses retina figures
- Has a smaller default figure size
- Uses a custom CSS stylesheet instead of the default Twitter Bootstrap style
## Vignette Info
Note the various macros within the `vignette` setion of the metadata block above. These are required in order to instruct R how to build the vignette. Note that you should change the `title` field and the `\VignetteIndexEntry` to match the title of your vignette.
## Styles
The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:
output:
rmarkdown::html_vignette:
css: mystyles.css
## Figures
The figure sizes have been customised so that you can easily put two images side-by-side.
```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```
You can enable figure captions by `fig_caption: yes` in YAML:
output:
rmarkdown::html_vignette:
fig_caption: yes
Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.
## More Examples
You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.
```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```
Also a quote using `>`:
> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
plot(raw)
autoplot(fit)
install.packages("outliers")
setwd('E:\\my work\\Github\\DataLab\\adsdc')
library(reshape2)
library(ggplot2)
library(GGally)
library(dplyr)
library(ggfortify)# ggplot PCA plotting
library(e1071)    # SVM library
library(randomForest)
library(DMwR)
raw<-read.csv("dataset_challenge_one.tsv",sep="\t", header=TRUE)
#str(raw)
#summary(raw)
# Remove missing value
sum(!complete.cases(raw))
df<-raw[complete.cases(raw),]         # complete records
var_col<-which(names(df)!="class")    # columns of variables
class_col<-which(names(df)=="class")  # column of class
# Outlier detection
outlier.scores <- lofactor(df[, var_col], k=5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing=T)[1:10]
print(outliers)
labels<-1:nrow(df)
labels[-outliers] <- "."
# Plot the outlier in PC1 vs PC2
fit <- prcomp(df[,var_col], cor=TRUE)
outlier_df<-df
outlier_df$class<-ifelse(labels>=1,-1,outlier_df$class)
outlier_df$class<-as.factor(outlier_df$class)
autoplot(fit, data =outlier_df, colour = 'class',shape=T)
# PCA
fit <- prcomp(df[,var_col], cor=TRUE)
summary(fit)[,1:6] # print variance accounted for
fit$
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
autoplot(fit, data=df, colour = 'class')
df.pca<-data.frame((fit$x)[,1:2],class=df[,class_col])
corr.pca<-cor(df.pca)
ggpairs(data=df.pca, mapping = aes(color = class))
loadings(fit) # pc loadings
fit$scores # the principal components
autoplot(fit, data=df, colour = 'class')
df.pca<-data.frame((fit$x)[,1:2],class=df[,class_col])
corr.pca<-cor(df.pca)
ggpairs(data=df.pca, mapping = aes(color = class))
ggpairs(data=df.pca, mapping = aes(color = class))
df.pca<-data.frame((fit$x)[,1:2],class=df[,class_col])
corr.pca<-cor(df.pca)
ggpairs(data=df.pca, mapping = aes(color = class))
head(df.pca)
ggpairs(data= df.pca, mapping = aes(color = class))
ggpairs(data= df.pca)
ggpairs(data= df.pca, mapping = aes(color = class))
ggpairs(data= df.pca, mapping=aes(color=class))
summary(df.pca)
str(df.pca)
autoplot(fit, data =outlier_df, colour = 'class',shape=T)
df.pca$class<-as.factor(df.pca$class)
corr.pca<-cor(df.pca)
ggpairs(data= df.pca, mapping=aes(color=class))
loadings(fit) # pc loadings
?loadings
str(fit)
fit$rotation
fit$rotation[,1:2]
df.class<-as.factor(df$class)
autoplot(fit, data=df, colour = 'class')
?cor
corr<-sapply(df, function(x) cor(x,df$class))
varClassCorr<-sapply(df[,var_col], function(x) cor(x,df$class))
order(varClassCorr)
order(varClassCorr, decreasing = F)
varClassCorr[order(varClassCorr, decreasing = F)]
varClassCorr[order(varClassCorr)]
varClassCorr[order(varClassCorr)][1:5]
plot(varClassCorr[order(varClassCorr)][1:5])
qplot(varClassCorr[order(varClassCorr)][1:10])
plot(varClassCorr[order(varClassCorr)][1:10])
plot(varClassCorr[order(varClassCorr)][1:10], xlab = names(varClassCorr[order(varClassCorr)][1:10]))
top10.var<-varClassCorr[order(abs(varClassCorr))][1:10]
top.var<-varClassCorr[order(abs(varClassCorr))][1:10]
plot(top.var, xlab = names(top.var))
varClassCorr[order(abs(varClassCorr))][1:10]
abs(varClassCorr)
top.var<-varClassCorr[order(abs(varClassCorr), decreasing = T)][1:10]
top.var
plot(top.var, xlab = names(top.var))
varClassCorr[order(abs(varClassCorr), decreasing = T)][1:10]
varClassCorr[order(abs(varClassCorr), decreasing = T)]
top.var<-varClassCorr[order(abs(varClassCorr), decreasing = T)]
head(top.var)
tail(top.var)
top.var<-varClassCorr[order(abs(varClassCorr), decreasing = T)][1:2]
varClassCorr[order(abs(varClassCorr), decreasing = T)[1:2]]
order(abs(varClassCorr), decreasing = T)[1:2]
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
head(var.sig)
ggpairs(data= var.sig, mapping=aes(color=class))
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
ggpairs(data= var.sig, mapping=aes(color=class))
View(var.sig)
str(var.sig)
df.class<-as.factor(df$class)
df$class<-as.factor(df$class)
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
ggpairs(data=var.sig, mapping=aes(color=class))
fit$rotation[,1:2]
top.var<-order(abs(varClassCorr), decreasing = T)[1:2]
fit$rotation[,1:2][top.var,]
order(abs(fit$rotation[,1]))
arClassCorr[order(abs(varClassCorr), decreasing = T)[1:2]]
varClassCorr[order(abs(varClassCorr), decreasing = T)[1:2]]
PC1.rotation<-fit$rotation[,1]
PC1.rotation[order(abs(fit$rotation[,1]))]
PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)]
PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10]
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10])
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10],labels = T)
barplot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10])
barplot(top.var, xlab = names(top.var))
top.var<-order(abs(varClassCorr), decreasing = T)[1:10]
barplot(top.var, xlab = names(top.var))
barplot(top.var)
barplot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10])
barplot(top.var)
barplot(varClassCorr[order(abs(varClassCorr), decreasing = T)[1:10]])
plot(varClassCorr[order(abs(varClassCorr), decreasing = T)[1:10]])
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)][1:10])
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)[1:10])]
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)[1:10]])
varPC.sig<-df[,c(order(abs(fit$rotation[,1]),decreasing = T)[1:10],class_col)]
ggpairs(data=varPC.sig, mapping=aes(color=class))
varPC.sig<-df[,c(order(abs(fit$rotation[,1]),decreasing = T)[1:2],class_col)]
ggpairs(data=varPC.sig, mapping=aes(color=class))
str(fit)
varPC.sig<-cbind(df[,c(order(abs(fit$rotation[,1]),decreasing = T)[1:2])],fit$x[,1])
varPC.sig<-cbind(df[,c(order(abs(fit$rotation[,1]),decreasing = T)[1:2])],PC1=fit$x[,1])
ggpairs(data=varPC.sig, mapping=aes(color=class))
varPC.sig<-cbind(df[,c(order(abs(fit$rotation[,1]),decreasing = T)[1:2])],PC1=fit$x[,1])
View(var.sig)
View(varPC.sig)
ggpairs(data=varPC.sig)
plot(PC1.rotation[order(abs(fit$rotation[,1]),decreasing = T)[1:10]])
c(order(abs(fit$rotation[,1]),decreasing = T)[1:2])
ggpairs(data=varPC.sig)
plot(varClassCorr[order(abs(varClassCorr), decreasing = T)[1:10]], main="test")
PC1=fit$x[,1]
varPC1Corr<-sapply(df[,var_col], function(x) cor(x,PC1))
order(abs(varPC1Corr), decreasing = T)[1:2]
order(abs(fit$rotation[,1]),decreasing = T)[1:2] # top 2 variable correlated to PC1
# rotation of PC1
PC1=fit$x[,1]
varPC1Corr<-sapply(df[,var_col], function(x) cor(x,PC1))
PC1.rotation<-fit$rotation[,1]
order(abs(varPC1Corr), decreasing = T)[1:2] # top 2 variable correlated to PC1
varPC.sig<-cbind(df[,c(order(abs(varPC1Corr), decreasing = T)[1:2])],PC1=PC1)
ggpairs(data=varPC.sig)
plot(PC1.rotation[order(abs(varPC1Corr), decreasing = T)[1:2]],main="Top 10 variable correlated to PC1") # top 10 variable correlated to PC1
plot(PC1.rotation[order(abs(varPC1Corr), decreasing = T)[1:0]],main="Top 10 variable correlated to PC1") # top 10 variable correlated to PC1
plot(PC1.rotation[order(abs(varPC1Corr), decreasing = T)[1:10]],main="Top 10 variable correlated to PC1") # top 10 variable correlated to PC1
plot(varPC1Corr[order(abs(varPC1Corr), decreasing = T)[1:10]],main="Top 10 variable correlated to PC1") # top 10 variable correlated to PC1
ggpairs(data=var.sig, mapping=aes(color=class))
varClassCorr<-sapply(df[,var_col], function(x) cor(x,df$class))
varClassCorr<-sapply(df[,var_col], function(x) cor(x,df$class))
varClassCorr<-sapply(df[,var_col], function(x) cor(x,as.numeric(df$class)))
#varClassCorr[order(abs(varClassCorr), decreasing = T)[1:2]]
top.var<-order(abs(varClassCorr), decreasing = T)[1:10]
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
ggpairs(data=var.sig, mapping=aes(color=class))
plot(varClassCorr[order(abs(varClassCorr), decreasing = T)[1:10]], main="Top 10 variable correlated to class")
ggpairs(data=var.sig, mapping=aes(color=class))
varClassCorr<-sapply(df[,var_col], function(x) cor(x,as.numeric(df$class)))
top.var<-order(abs(varClassCorr), decreasing = T)[1:10]
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
plot(varClassCorr[order(abs(varClassCorr), decreasing = T)[1:10]], main="Top 10 variable correlated to class")
ggpairs(data=var.sig, mapping=aes(color=class))
str(var.sig)
varClassCorr<-sapply(df[,var_col], function(x) cor(x,as.numeric(df$class)))
varClassCorr[order(abs(varClassCorr), decreasing = T)[1:2]]
top.var<-order(abs(varClassCorr), decreasing = T)[1:10]
var.sig<-df[,c(order(abs(varClassCorr), decreasing = T)[1:2],class_col)]
ggpairs(data=var.sig, mapping=aes(color=class))
