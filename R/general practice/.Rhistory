Petal.Length.mean = mean(Petal.Length)
) %>%
filter(Species=="setosa") %>%
# inner_join, left_join, right_join, full_join
# pair plot
ggpairs(iris, aes(colour = Species, alpha = 0.4))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
# inner_join, left_join, right_join, full_join
# pair plot
ggpairs(iris, aes(colour = Species, alpha = 0.4))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
summary(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
head(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
head(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
iris
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
iris
head(val2col)
library(ggplot2)
library(nnet)         # multinom
library(rpart) # rf
library(e1071)        # svm
library(caret)
library(GGally)
library(tidyr)
library(dplyr)
head(iris)
summary(iris)
sum(is.na(iris))
col2val<-iris %>%
gather(type, value, -Species, na.rm=T) %>%
arrange(Species, desc(type))
head(col2val)
val2col<-col2val %>%
spread(type, value)
head(val2col)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa") %>%
iris
summary(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species=="setosa")
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species~="setosa")
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa")
r
iris %>%
group_by(Species)%>%
mutate(percent = Petal.Length/mean(Petal.Length, na.rm=T)) %>%
filter(Species!="setosa")
iris
final[complete.cases(iris), ]
iris[complete.cases(iris), ]
iris[complete.cases(iris[, 2:3]), ]
iris[iris$Petal.Length > 6, ]
iris[iris$Petal.Length > 7, ]
iris[iris$Petal.Length > 6 && Sepal.Width > 3, ]
iris[iris$Petal.Length > 6 && Sepal.Width > 2, ]
iris[iris$Petal.Length > 6 & Sepal.Width > 2, ]
iris[iris$Petal.Length > 6 && iris$Sepal.Width > 2, ]
subset(iris, iris$Petal.Length > 6 && iris$Sepal.Width > 2)
subset(iris, Petal.Length > 6 && Sepal.Width > 2)
subset(iris, Petal.Length > 6)
subset(iris, Petal.Length > 6 & Petal.Width>2)
subset(iris, Petal.Length > 6 & Petal.Width > 2, select = Septal.Width:Petal.Width)
subset(iris, Petal.Length > 6 & Petal.Width > 2, select = Sepal.Width:Petal.Width)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" && Petal.Length >= mean(Petal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" ) %>%
filter(Petal.Length >= mean(Petal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
#filter(Species!="setosa" ) %>%
filter(Petal.Length >= mean(Petal.Length, na.rm=T))
head(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
#filter(Species!="setosa" ) %>%
filter(Petal.Length >= mean(Petal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
#filter(Species!="setosa" ) %>%
filter(Petal.Length >= 0)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
#filter(Species!="setosa" ) %>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
#filter(Species!="setosa" ) %>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" ) %>%
#filter(Sepal.Length >= mean(Sepal.Length, na.rm=T))
head(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" ) %>%
#filter(Sepal.Length >= mean(Sepal.Length, na.rm=T))
head(iris)
iris %>%
group_by(Species)%>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" )
iris %>%
group_by(Species)%>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T)) %>%
summarise(
count = n(),
Petal.Length.mean = mean(Petal.Length, na.rm=T)
) %>%
filter(Species!="setosa" )
iris %>%
group_by(Species)%>%
mutate(percent = Petal.Length/mean(Petal.Length, na.rm=T)) %>%
filter(Species!="setosa") %>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T)) %>%
iris
iris %>%
group_by(Species)%>%
mutate(percent = Petal.Length/mean(Petal.Length, na.rm=T)) %>%
filter(Species!="setosa") %>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T)) %>%
iris
iris %>%
group_by(Species)%>%
mutate(percent = Petal.Length/mean(Petal.Length, na.rm=T)) %>%
filter(Species!="setosa") %>%
filter(Sepal.Length >= mean(Sepal.Length, na.rm=T))
iris %>%
group_by(Species)%>%
mutate(percent = Petal.Length/mean(Petal.Length, na.rm=T)) %>%
filter(Species!="setosa" && Sepal.Length >= mean(Sepal.Length, na.rm=T))
subset(iris, Petal.Length > quantile(Petal.Length, 0.95) &
Petal.Length < quantile(Petal.Length, 0.05) &
Petal.Width > 2, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length > quantile(Petal.Length, 0.95) &
Petal.Length < quantile(Petal.Length, 0.05) &
Petal.Width > 0.1, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length > quantile(Petal.Length, 0.95) &
Petal.Length < quantile(Petal.Length, 0.05) &
Petal.Width > 0.1, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length < quantile(Petal.Length, 0.95) &
Petal.Length > quantile(Petal.Length, 0.05) &
Petal.Width > 0.1, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length < quantile(Petal.Length, 0.95) &
Petal.Length > quantile(Petal.Length, 0.05) &
Petal.Width > 3, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length < quantile(Petal.Length, 0.95) &
Petal.Length > quantile(Petal.Length, 0.05) &
Petal.Width > 2, select = Sepal.Width:Petal.Width)
subset(iris, Petal.Length < quantile(Petal.Length, 0.95) &
Petal.Length > quantile(Petal.Length, 0.05) &
Petal.Width > 2.3, select = Sepal.Width:Petal.Width)
# Basic setup and library import
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(dplyr)
kable(cars[1:5, ], caption = "a table")
p <- ggplot(iris, aes(x=Species, y=Petal.Length)) +
geom_boxplot()
p
p <- ggplot(iris, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 2)
p
p <- ggplot(iris, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
train[, x_col] <- scale(train[, x_col], center = T)
train<- iris[train_index, ]
test <- iris[test_index, ]
train[, x_col] <- scale(train[, x_col], center = T)
test[, x_col] <- scale(test[, x_col], center = T)
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
colMeans(train)
colMeans(train[, x_col])
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
train<- iris[train_index, ]
test <- iris[test_index, ]
colMeans(train[, x_col])
train[, x_col] <- scale(train[, x_col])
test[, x_col] <- scale(test[, x_col])
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
train<- iris[train_index, ]
test <- iris[test_index, ]
colMeans(train[, x_col])
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
train[, x_col] <- scale(train[, x_col])
test[, x_col] <- scale(test[, x_col])
p <- ggplot(train, aes(x=Species, y=Petal.Length)) +
geom_boxplot(outlier.color = 'red', outlier.shape = 1)
p
library(corrplot)
install.packages("corrplot")
if(F){
install.packages("ggplot2")
install.packages("nnet")
install.packages("rpart")
install.packages("e1071")
install.packages("caret")
install.packages("GGally")
install.packages("tidyr")
install.packages("dplyr")
install.packages("corrplot")
}
M<-cor(iris)
M<-cor(iris[,x_col])
head(round(M,2))
corrplot(corr, method="circle")
library(corrplot) # correlation plot
corrplot(corr, method="circle")
corrplot(M, method="circle")
corrplot(M, method="color")
corrplot(M, method="color", type ="upper")
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black")
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.2)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.02)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.02)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.8)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.9)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black", sig.level=0.9)
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black")
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black",diag=FALSE )
corrplot(M, method="color", type ="upper", tl.srt=45, tl.col="black",diag=FALSE,addCoef.col = "black")
summary(iris)
sum(is.na(iris))
sum(is.na(iris))
head(iris)
is.na(iris)
sum(!is.na(iris))
sapply(iris, function(x) sum(is.na(x)))
iris$Sepal.Length[is.na(iris$Sepal.Length)] = median(iris$Sepal.Length , na.rm = TRUE)
iris %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
library(dplyr) # manipulate table
iris %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
rf.fit <- rpart(formula,data=train)
print(rf.fit)
table(predict(rf.fit, test[,x_col], type = 'class'), test$Species)
rf.fit$variable.importance
install.packages("caret")
tuned.svm.fit = tune.svm(formula, data = train, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
install.packages("e1071")
library(e1071)    # svm
tuned.svm.fit = tune.svm(formula, data = train, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
summary(tuned.svm.fit)
svm.fit<- svm(formula, data = train)
summary(svm.fit)
svm.fit<- svm(formula, data = train, cross = 10)
print(svm.fit)
summary(svm.fit)
svm.fit<- svm(formula, data = train)
print(svm.fit)
summary(svm.fit)
svm.fit<- svm(formula, data = train, cross = 10) # 10 fold-cv
print(svm.fit)
summary(svm.fit)
svm.fit<- svm(formula, data = train, cross = 10) # 10 fold-cv
print(svm.fit)
summary(svm.fit)
summary(tuned.svm.fit)
tuned.svm.fit = tune.svm(formula, data = train, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
summary(tuned.svm.fit)
print(rf.fit)
summary(rf.fit)
summary(rf.fit)
table(predict(svm.fit, test[,x_col], type = 'class'), test$Species)
table(predict(rf.fit, test[,x_col], type = 'class'), test$Species)
train_index <- sample(1:nrow(iris), 0.8 * nrow(iris))
test_index <- -train_index
train<- iris[train_index, ]
test <- iris[test_index, ]
sum(test_index)
length(train)
(nrow(train)+nrow(test)) == nrow(iris)
colMeans(train[, x_col])
colMeans(train[, x_col])
library(dplyr)
"sdsdsdsd"
as.yearmon("2018-08-03")
library(zoo)
as.Date("2018-08-03", "%Y-%M-01")
as.Date("2018-08-03", "%Y-%m-01")
as.Date("2018-08-03", "%Y-%m-03")
as.Date("2018-08-03", "%Y-%m-%d")
as.Date("2018-08-03", format="%Y-%m")
formate(as.Date("2018-08-03"), '%y-%m')
format(as.Date("2018-08-03"), '%y-%m')
format(as.Date("2018-08-03"), '%y-%m') -1
format(as.Date("2018-08-03"), '%y-%m-01')
format(as.Date("2018-08-03"), '%y-%m-01')+1
format(as.Date("2018-08-03"), '%Y-%m-01')+1
format(as.Date("2018-08-03"), '%Y-%m-01')
as.Date(format(as.Date("2018-08-03"), '%Y-%m-01'))
as.Date(format(as.Date("2018-08-03"), '%Y-%m-01'))+1
as.Date(format("2018-08-03", '%Y-%m-01'))+1
as.Date(format(as.Date("2018-08-03"), '%Y-%m'))+1
as.Date(format(as.Date("2018-08-03"), '%Y-%m'))
as.Date(format(as.Date("2018-08-03"), '%y-%m'))
as.Date(format(as.Date("2018-08-03"), '%y-%m-01'))
as.Date(format(as.Date("2018-08-03"), '%Y-%M-01'))
as.Date(format(as.Date("2018-08-03"), '%Y-%m-01'))
as.Date(format(as.Date("2018-08-03"), '%Y-%m-01'))+1
as.Date(format(as.Date("2018-08-03")-30, '%Y-%m-01'))
as.Date(format(as.Date("2018-08-03"), '%Y-%m-01'))
library(lubridate)
month(d)
d<-as.Date("2018-08-03")
month(d)
d<-as.Date("2018-08-03")
month(d) <- month(d)+1
d
month(d)+1
d<-as.Date("2018-8-03")
month(d) <- month(d)+1
last_month <- filter(log, between(act_time, ?, ?))
d
d<-as.Date("2018-8-03")
add.month.ceil(d)
add.month(d)
d %m+% month(1)
d<-as.Date("2018-8-03")
d %m+% month(1)
124*0.15
130*1.15
head(msleep)
msleep<-ggplot2::msleep
glimpse(msleep)
msleep<-ggplot2::msleep
glimpse(msleep)
library(dplyr)
glimpse(msleep)
mutate(msleep, rate = awake/quantile(awake, 0.9)) %>%
select(rate)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9)) %>%
select(awake, rate)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9)) %>%
select(awake, qti rate)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9)) %>%
select(awake, qti, rate)
summarise(msleep, rate = sum(ifelse(awake>=quantile(awake, 0.9)))/n())
summarise(msleep, rate = sum(ifelse(awake>=quantile(awake, 0.9), 1, 0))/n())
summarise(msleep, rate = sum(ifelse(awake>quantile(awake, 0.9), 1, 0))/n())
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(asc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(ascend(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(rate)) %>%
select(awake, qti, rate, rank) %>%
arrange(rank)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank) %>%
slice(3)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank) %>%
slice(1:3)
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank) %>%
filter(rate == max(rate))
mutate(msleep, qti = quantile(awake, 0.9),
rate = awake/quantile(awake, 0.9),
rank = rank(desc(rate))) %>%
select(awake, qti, rate, rank) %>%
arrange(rank) %>%
slice(1:10) %>%
filter(rate == max(rate))
